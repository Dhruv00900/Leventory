import Bill from '../models/Bill.js';

import Product from "../models/Product.js";

export const generateBill = async (req, res) => {
  try {
    const { customerName, items, totalAmount } = req.body;
    const generatedBy = req.user.email;
    const userId = req.user._id; // define userId from req.user

    // 1. Update product stock
    for (const item of items) {
      const product = await Product.findById(item.productId);
      if (!product) return res.status(404).json({ message: "Product not found" });

      if (product.quantity < item.quantity) {
        return res.status(400).json({ message: `Not enough stock for ${product.name}` });
      }

      product.quantity -= item.quantity;
      await product.save();
    }

    // 2. Save bill
    const bill = await Bill.create({ customerName, items, totalAmount, generatedBy, userId });

    // 3. Get updated products
    const updatedProducts = await Product.find();

    res.status(201).json({ bill, updatedProducts });
  } catch (error) {
    res.status(500).json({ message: "Error generating bill", error });
  }
};
export const getAllBills = async (req, res) => {
  try {
    const bills = await Bill.find().sort({ createdAt: -1 }); // removed populate
    res.json({ bills });
    console.log(bills);
    
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Error fetching bills" });
  }
};


// GET /api/bills/user/:userId

// Route: Get bills generated by a specific username (shop staff)

export const getBillsByUserId = async (req, res) => {
  try {
   

    const { username } = req.params;
    const bills = await Bill.find({ generatedBy: username });
    res.status(200).json(bills);

  } catch (error) {
    res.status(500).json({ message: "Error fetching user bills", error });
  }
};




// Controller function to get the logged-in user's transactions
export const getUserTransactions = async (req, res) => {
  try {
    const generatedBy = req.user.name; // or req.user.username or whatever field holds the name

    const bills = await Bill.find({ generatedBy })
      .populate({
        path: 'products.productId',
        select: 'name price quantity'
      })
      .sort({ date: -1 });

    res.status(200).json(bills);
  } catch (error) {
    console.error('Error fetching user transactions:', error);
    res.status(500).json({ message: 'Error fetching user transactions' });
  }
};




// Admin - all bills
export const getAllTransactions = async (req, res) => {
  try {
    const bills = await Bill.find().populate('userId', 'email').sort({ createdAt: -1 });
    res.json(bills);
  } catch (err) {
    res.status(500).json({ message: 'Error fetching all transactions' });
  }
};



// GET /api/bills/:generatedBy
export const getBillsByGeneratedBy = async (req, res) => {
  try {
    const { generatedBy } = req.params;

    const bills = await Bill.find({ generatedBy });

    if (!bills.length) {
      return res.status(404).json({ message: "No bills found for this user" });
    }

    res.status(200).json(bills);
  } catch (error) {
    res.status(500).json({
      message: "Internal Server Error",
      error: error.message,
    });
  }
};


export const getBillById = async (req, res) => {
  try {
    const bill = await Bill.findById(req.params.id);
    if (!bill) {
      return res.status(404).json({ message: "Bill not found" });
    }
    res.json(bill);
  } catch (error) {
    res.status(500).json({ message: "Server error" });
  }
};
